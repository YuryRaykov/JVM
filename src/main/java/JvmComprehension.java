public class JvmComprehension { // После запуска программы загружается  класс
            // JvmComprehension и системные классы загружаются в Metaspace.
           // После того как загрузилсякласс JvmComprehension JVM ищет точку входа.

            public static void main(String[] args) { // Вызывается  метод main и начинается выполнение программы.
                // Создаётся фрейм (кадр) в стеке, т.е. метод main хранится в Stack Memory.
                // Туда добавляются все данные которые будут созданны в данном методе.
                int i = 1; // Создается приминтивный тип int i=1 и записывается в Stack.
                Object o = new Object(); // Создаётся объект Object и записывается в heap (куча).
                // После создания объекта ссылка на него записывается в переменную o и эта ссылка записывается в Stack.
                Integer ii = 2; // Создается класс обертка (ссылочный тип данных) типа Integer.
                // Создается объект (автоупаковка) i и записывается в heap, а ссылка на него в Stack.
                printAll(o, i, ii); // Здесь происходит вызов метода printAll.
                System.out.println("finished"); // Создается  новый фрейм в Stack куда передаем ссылку на "finished".
            }

            //После завершения программы (в нашем случае выполнение команды "System.out.println("finished")")
            // начинается очищение Stack – удаляется фрейм для System.out.println т.д.(вверх по строкам,так как в Stack
            // информация хранится по принципу LiFo) и программа завершит свою работу.

            private static void printAll(Object o, int i, Integer ii) { // Создается новый фрейм в Stack куда будет
                // переданы ссылки на его параметры (o, i, ii). Примечание: для объекта Object, который лежит в куче
                // будет создана новая ссылка.

                Integer uselessVar = 700; // Создается класс обертка (ссылочный тип данных) типа Integer.
                // Создается объект (автоупаковка) uselessVar и записывается в heap, а ссылка на него в Stack.
                System.out.println(o.toString() + i + ii); // Создается  новый фрейм в Stack куда передаем
                // ссылки o.toString() , i,  ii. После того как выполнился данный фрейм происходит очищение
                // Stack (удалился фрейм для метода System.out.println, затем для printAll) и мы переходим к строке
                // System.out.println("finished");
            }
        }

        //В конце работы программы сработает сборщик мусора и всё соберёт
        // (при этом Integer uselessVar вообще не используется).



